using System;
using Xunit;
using KSynthLib.K4;

namespace KSynthLib.Tests.K4
{
    public class SinglePatchTests
    {
        public SinglePatchTests()
        {
        }

        [Fact]
        public void InitFromData_IsSuccessful()
        {
            // This is the first single patch from A401.SND
            byte[] data =
            {
                0x4d, 0x65, 0x6c, 0x6f, 0x20, 0x56, 0x6f, 0x78,
                0x20, 0x31, 0x64, 0x20, 0x06, 0x04, 0x0c, 0x02,
                0x1c, 0x3f, 0x39, 0x31, 0x32, 0x32, 0x32, 0x3d,
                0x00, 0x30, 0x00, 0x32, 0x32, 0x32, 0x00, 0x00,
                0x02, 0x03, 0x00, 0x00, 0x50, 0x40, 0x12, 0x12,
                0x7e, 0x7f, 0x4c, 0x4c, 0x5a, 0x5b, 0x00, 0x34,
                0x02, 0x03, 0x2c, 0x37, 0x34, 0x35, 0x02, 0x02,
                0x15, 0x11, 0x4b, 0x4b, 0x34, 0x35, 0x36, 0x36,
                0x34, 0x35, 0x48, 0x48, 0x34, 0x35, 0x5a, 0x5a,
                0x34, 0x35, 0x40, 0x40, 0x02, 0x01, 0x41, 0x41,
                0x35, 0x36, 0x32, 0x32, 0x35, 0x36, 0x2c, 0x2c,
                0x35, 0x36, 0x32, 0x32, 0x35, 0x36, 0x32, 0x32,
                0x35, 0x36, 0x32, 0x32, 0x33, 0x34, 0x31, 0x51,
                0x02, 0x07, 0x32, 0x34, 0x5b, 0x34, 0x32, 0x34,
                0x36, 0x34, 0x32, 0x33, 0x56, 0x01, 0x64, 0x02,
                0x32, 0x63, 0x56, 0x01, 0x32, 0x33, 0x32, 0x33,
                0x32, 0x33, 0x6e, 0x47, 0x65, 0x6e, 0x27, 0x53,
/*
0000090 69 73 74 65 72 64 36 06 04 0c 02 08 3f 2d 2b 32
00000a0 32 00 3e 00 59 00 32 32 32 00 00 02 03 00 30 50
00000b0 40 09 00 7e 7f 4c 58 5a 5b 00 34 02 03 32 32 34
00000c0 35 02 02 15 11 4b 2f 34 35 36 36 34 35 48 48 34
00000d0 35 5a 5a 34 35 40 40 02 01 41 41 35 36 32 32 35
00000e0 36 2c 50 35 36 32 32 35 36 32 32 35 36 32 32 33
00000f0 34 28 51 02 07 32 34 32 34 3f 34 32 34 32 33 56
*/
            };

            SinglePatch singlePatch = new SinglePatch(data);
            //Console.WriteLine($"Single patch name = '{singlePatch.Name}'");
            Assert.Equal("Melo Vox 1", singlePatch.Name);
        }

        [Fact]
        public void InitSuccessful()
        {
            SinglePatch single = new SinglePatch();
            Assert.NotNull(single);
        }

        [Fact]
        public void NameIsTruncatedWhenSet()
        {
            SinglePatch sp = new SinglePatch();
            string longName = "MyPatch*WithTooLongAName";
            sp.Name = longName;
            Assert.Equal(SinglePatch.NameLength, sp.Name.Length);
        }
    }
}
